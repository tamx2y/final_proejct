{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"V28","mount_file_id":"11NyO60Kz1vrZb0o0QeJCRIaqGsj_XV4f","authorship_tag":"ABX9TyMD1N5FL/p7XQNlKDWUklul"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"TPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"bd3wgEVlU5bm"},"outputs":[],"source":["# 기본\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# 경고 뜨지 않게 설정\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","# 그래프 설정\n","sns.set()\n","\n","# 그래프 기본 설정\n","plt.rcParams['font.family'] = 'Malgun Gothic'\n","# plt.rcParams['font.family'] = 'AppleGothic'\n","plt.rcParams['figure.figsize'] = 12, 6\n","plt.rcParams['font.size'] = 14\n","plt.rcParams['axes.unicode_minus'] = False\n","\n","# 데이터 전처리 알고리즘\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.preprocessing import StandardScaler\n","\n","# 학습용과 검증용으로 나누는 함수\n","from sklearn.model_selection import train_test_split\n","\n","# 교차 검증\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import cross_validate\n","from sklearn.model_selection import KFold\n","from sklearn.model_selection import StratifiedKFold\n","\n","# 평가함수\n","# 분류용\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import precision_score\n","from sklearn.metrics import recall_score\n","from sklearn.metrics import f1_score\n","from sklearn.metrics import roc_auc_score\n","\n","# 회귀용\n","from sklearn.metrics import r2_score\n","from sklearn.metrics import mean_squared_error\n","\n","# 모델의 최적의 하이퍼 파라미터를 찾기 위한 도구\n","from sklearn.model_selection import GridSearchCV\n","\n","# 머신러닝 알고리즘 - 분류\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.ensemble import GradientBoostingClassifier\n","from lightgbm import LGBMClassifier\n","from xgboost import XGBClassifier\n","from sklearn.ensemble import VotingClassifier\n","\n","# 머신러닝 알고리즘 - 회귀\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.linear_model import LinearRegression\n","from sklearn.linear_model import Ridge\n","from sklearn.linear_model import Lasso\n","from sklearn.linear_model import ElasticNet\n","from sklearn.svm import SVR\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.ensemble import AdaBoostRegressor\n","from sklearn.ensemble import GradientBoostingRegressor\n","from lightgbm import LGBMRegressor\n","from xgboost import XGBRegressor\n","from sklearn.ensemble import VotingRegressor\n","\n","# 학습 모델 저장을 위한 라이브러리\n","import pickle"]},{"cell_type":"markdown","source":["### 프로젝트 세팅"],"metadata":{"id":"nHcUTYT0VRS3"}},{"cell_type":"code","source":["# 학습이 완료된 모델을 저장할 파일 이름\n","best_model_path = '/content/drive/MyDrive/3. 수업/01. 멋사 데이터 분석/12_파이널 프로젝트/인공지능 모델 구축/best_model_titanic.dat'\n","# 교차검증 횟수\n","cv_count = 10\n","# 교차 검증\n","kfold = KFold(n_splits=cv_count, shuffle=True, random_state=1)\n","# 평가 결과를 담을 리스트\n","# 필요하다면 다른 것도 만들어주세요\n","f1_score_list = []\n","# 학습 모델 이름\n","model_name_list = []"],"metadata":{"id":"5wkxLEAkVw6e"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 데이터 준비\n","- 데이터를 읽어오고 필요한 전처리까지 다 끝낸 다음 입력데이터는 train_X, 결과데이터는 train_y라는 변수에 담아서 준비"],"metadata":{"id":"OVArAosKV8R1"}},{"cell_type":"code","source":["# 데이터를 읽어온다.\n","r05 = pd.read_parquet('/content/drive/MyDrive/3. 수업/01. 멋사 데이터 분석/12_파이널 프로젝트/인공지능 모델 구축/r05.parquet')"],"metadata":{"id":"rQMKLeCkWF8N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["r05.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PX-HFa1eWTmN","executionInfo":{"status":"ok","timestamp":1751262117770,"user_tz":-540,"elapsed":117,"user":{"displayName":"Tammy Kim","userId":"17708681898941269715"}},"outputId":"7dcdbe9f-93e0-468f-f6d8-c5d08c19029d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 86400000 entries, 0 to 86399999\n","Data columns (total 22 columns):\n"," #   Column         Dtype   \n","---  ------         -----   \n"," 0   이용금액_R3M_신용체크  int32   \n"," 1   이용금액_R3M_신용    int32   \n"," 2   _1순위카드이용금액     int32   \n"," 3   기준년월           int32   \n"," 4   ID             category\n"," 5   Segment        category\n"," 6   정상청구원금_B0M     int32   \n"," 7   정상청구원금_B2M     int32   \n"," 8   이용금액_일시불_R12M  int32   \n"," 9   이용금액_일시불_B0M   int32   \n"," 10  이용금액_일시불_R6M   int32   \n"," 11  이용금액_일시불_R3M   int32   \n"," 12  이용금액_오프라인_B0M  int32   \n"," 13  정상입금원금_B5M     int32   \n"," 14  정상입금원금_B0M     int32   \n"," 15  이용금액_오프라인_R3M  int32   \n"," 16  이용금액_오프라인_R6M  int32   \n"," 17  정상입금원금_B2M     int32   \n"," 18  _3순위업종_이용금액    int32   \n"," 19  청구금액_R6M       int32   \n"," 20  청구금액_R3M       int32   \n"," 21  청구금액_B0        int32   \n","dtypes: category(2), int32(20)\n","memory usage: 6.9 GB\n"]}]},{"cell_type":"code","source":["# 표준화를 위해 결과데이터를 제외한다\n","X = r05.drop(['Segment', 'ID'], axis=1)\n","# 표준화\n","scaler1 = StandardScaler()\n","scaler1.fit(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"ehAOemaEWz4r","executionInfo":{"status":"ok","timestamp":1751262297556,"user_tz":-540,"elapsed":18855,"user":{"displayName":"Tammy Kim","userId":"17708681898941269715"}},"outputId":"15a14c05-e6bd-425a-b3b6-d0d487a8afb1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["StandardScaler()"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>StandardScaler()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>StandardScaler</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# 입력과 결과로 나눈다.\n","X = r05.drop(['Segment', 'ID'], axis = 1)\n","y = r05['Segment']"],"metadata":{"id":"lFLlPycBW_wy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 표준화\n","X = scaler1.transform(X)\n","X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jI0zjxe-XhdQ","executionInfo":{"status":"ok","timestamp":1751262402298,"user_tz":-540,"elapsed":9845,"user":{"displayName":"Tammy Kim","userId":"17708681898941269715"}},"outputId":"1f18fcf1-8056-402d-f4cf-573e2be2284d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.72013722, -0.68913082, -0.52092537, ...,  1.13911692,\n","         1.30940703,  0.9123705 ],\n","       [-0.72013722, -0.68913082, -0.52092537, ...,  1.76751112,\n","         1.5957257 ,  1.36207508],\n","       [-0.72013722, -0.68913082, -0.52092537, ...,  2.03031349,\n","         1.1875052 ,  1.3590176 ],\n","       ...,\n","       [ 0.19466764,  0.28203826, -0.28650406, ..., -0.1844458 ,\n","        -0.1729752 , -0.12245964],\n","       [ 0.19466764,  0.28203826, -0.28650406, ..., -0.12370471,\n","        -0.21986052, -0.36782254],\n","       [ 0.19466764,  0.28203826, -0.28650406, ..., -0.26682463,\n","        -0.25558671, -0.20921568]])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"4ddab76d"},"source":["train_X = X\n","train_y = y"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 기본 모델 사용하기\n","- 기본 모델 중 만족하는 것을 찾았다면 하이퍼 파라미터 튜닝은 생략할 것"],"metadata":{"id":"QQWXtdK8X7Dl"}},{"cell_type":"code","source":["# 표준화를 위해 결과데이터를 제외한다 (Segment와 ID 컬럼 제외)\n","X_raw = r05.drop(['Segment', 'ID'], axis=1) # 원본 X (스케일링 전)\n","\n","# 표준화 스케일러 학습 (fit)\n","scaler1 = StandardScaler()\n","scaler1.fit(X_raw) # r05.drop(['Segment', 'ID'], axis=1)와 동일한 데이터로 fit\n","\n","# 입력(특성)과 결과(타겟)로 나눈다.\n","# 이 단계에서 X는 원본 r05에서 Segment와 ID를 제외한 것\n","X = r05.drop(['Segment', 'ID'], axis = 1)\n","y = r05['Segment'] # 타겟 변수\n","\n","# 표준화 적용 (transform)\n","X_scaled = scaler1.transform(X) # X는 NumPy 배열이 됩니다.\n","# X_scaled의 컬럼 이름을 유지하기 위해 DataFrame으로 변환 (권장)\n","X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns, index=X.index)\n","\n","# 여기까지 현재 진행 상황\n","print(\"\\n--- 표준화된 X_scaled_df와 y 확인 ---\")\n","print(\"X_scaled_df.head():\")\n","print(X_scaled_df.head())\n","print(\"\\ny.head():\")\n","print(y.head())\n","print(f\"X_scaled_df shape: {X_scaled_df.shape}\")\n","print(f\"y shape: {y.shape}\")\n","\n","\n","# --- 이 다음 단계 ---\n","\n","# 1. 훈련(Train) 세트와 테스트(Test) 세트로 분할\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder # y가 문자열인 경우 대비\n","\n","# y (타겟 변수)가 문자열 범주형인 경우 Label Encoding이 필요합니다.\n","# 'Segment' 컬럼이 문자열('A', 'B', 'C' 등)이라면, 모델 학습 전에 숫자로 변환해야 합니다.\n","# 이미 숫자로 인코딩되어 있다면 이 부분은 건너뛰세요.\n","if y.dtype == 'object' or pd.api.types.is_categorical_dtype(y):\n","    le = LabelEncoder()\n","    y_encoded = le.fit_transform(y)\n","    print(f\"\\n--- 타겟 변수 Label Encoding 완료 ({le.classes_}) ---\")\n","    print(f\"원본 y head: {y.head()}\")\n","    print(f\"인코딩된 y head: {pd.Series(y_encoded).head()}\")\n","else:\n","    y_encoded = y # 이미 숫자형인 경우 그대로 사용\n","    print(f\"\\n--- 타겟 변수는 이미 숫자형입니다. Label Encoding 건너_었습니다. ---\")\n","\n","\n","# X_scaled_df (표준화된 특성 데이터프레임)와 y_encoded (인코딩된 타겟)를 분할\n","# test_size=0.2: 전체 데이터의 20%를 테스트 세트로 사용 (80%는 훈련 세트)\n","# random_state=42: 재현성을 위한 난수 시드 고정\n","# stratify=y_encoded: y의 클래스 비율을 훈련/테스트 세트에 동일하게 유지 (클래스 불균형 데이터에 중요)\n","X_train, X_test, y_train, y_test = train_test_split(X_scaled_df, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded)\n","\n","print(\"\\n--- 데이터 분할 결과 ---\")\n","print(f\"훈련 데이터 (X_train) shape: {X_train.shape}\")\n","print(f\"테스트 데이터 (X_test) shape: {X_test.shape}\")\n","print(f\"훈련 타겟 (y_train) shape: {y_train.shape}\")\n","print(f\"테스트 타겟 (y_test) shape: {y_test.shape}\")\n","\n","\n","# 이제 X_train, y_train을 가지고 모델 학습을 시작할 수 있습니다.\n","# 그리고 X_test, y_test를 가지고 모델 성능을 평가할 수 있습니다.\n","\n","# 다음으로 진행할 내용은 모델 학습 및 평가입니다.\n","# 예시: LGBMClassifier 학습 및 평가\n","from lightgbm import LGBMClassifier # <-- XGBClassifier 대신 LGBMClassifier 임포트\n","from sklearn.metrics import accuracy_score, classification_report\n","\n","print(\"\\n--- LGBMClassifier 모델 학습 시작 ---\")\n","# LGBMClassifier 초기화 (일반적인 파라미터, 성능을 위해 튜닝 필요할 수 있음)\n","# n_estimators: 부스팅 라운드 수 (트리 개수)\n","# random_state: 재현성\n","# n_jobs=-1: 모든 코어 사용\n","# objective: 다중 클래스 분류의 경우 'multiclass'\n","# num_class: 타겟 클래스의 개수 (y_encoded의 고유한 값 개수)\n","model = LGBMClassifier(n_estimators=100, random_state=42, n_jobs=-1,\n","                       objective='multiclass', num_class=len(le.classes_))\n","model.fit(X_train, y_train)\n","print(\"모델 학습 완료!\")\n","\n","print(\"\\n--- 테스트 데이터 예측 ---\")\n","y_pred = model.predict(X_test)\n","print(\"예측 완료.\")\n","\n","print(\"\\n--- 모델 성능 평가 ---\")\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f\"모델 정확도 (Accuracy): {accuracy:.4f}\")\n","\n","# 분류 리포트 (Precision, Recall, F1-score for each class)\n","# LabelEncoder를 사용했으므로, le.classes_를 사용하여 원본 클래스 이름을 출력합니다.\n","print(\"\\n--- 분류 리포트 ---\")\n","print(classification_report(y_test, y_pred, target_names=le.classes_ if 'le' in locals() else None))\n","\n","# 예측 결과 직접 확인하는 부분 (이전 대화에서 추가한 부분)\n","print(\"\\n--- 예측 값과 실제 값 비교 (테스트 세트 상위 10개) ---\")\n","if 'le' in locals(): # LabelEncoder 객체가 정의되어 있다면 (y가 문자열이었던 경우)\n","    actual_segments = le.inverse_transform(y_test[:10]) # 실제값 상위 10개\n","    predicted_segments = le.inverse_transform(y_pred[:10]) # 예측값 상위 10개\n","\n","    comparison_df = pd.DataFrame({\n","        'Actual Segment': actual_segments,\n","        'Predicted Segment': predicted_segments\n","    })\n","    print(comparison_df)\n","else: # y가 처음부터 숫자형이었던 경우\n","    comparison_df = pd.DataFrame({\n","        'Actual Segment': y_test[:10],\n","        'Predicted Segment': y_pred[:10]\n","    })\n","    print(comparison_df)\n","\n","print(\"\\n--- 예측된 'Segment' 값들의 분포 ---\")\n","if 'le' in locals():\n","    predicted_counts = pd.Series(le.inverse_transform(y_pred)).value_counts().sort_index()\n","    print(predicted_counts)\n","else:\n","    predicted_counts = pd.Series(y_pred).value_counts().sort_index()\n","    print(predicted_counts)\n","\n","\n","# 모델 및 스케일러 저장 (선택 사항)\n","import pickle\n","with open('scaler_r05.pkl', 'wb') as f:\n","    pickle.dump(scaler1, f)\n","with open('model_r05_lgbm.pkl', 'wb') as f: # 파일명에 lgbm 추가하여 구분\n","    pickle.dump(model, f)\n","print(\"\\n스케일러와 LightGBM 모델이 각각 'scaler_r05.pkl', 'model_r05_lgbm.pkl'로 저장되었습니다.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OqLN8tAqYTR-","executionInfo":{"status":"ok","timestamp":1751266914186,"user_tz":-540,"elapsed":1315766,"user":{"displayName":"Tammy Kim","userId":"17708681898941269715"}},"outputId":"fe1cbee7-4460-46b7-92f0-fec3a916aea6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","--- 표준화된 X_scaled_df와 y 확인 ---\n","X_scaled_df.head():\n","   이용금액_R3M_신용체크  이용금액_R3M_신용  _1순위카드이용금액     기준년월  정상청구원금_B0M  정상청구원금_B2M  \\\n","0      -0.720137    -0.689131   -0.520925 -1.46385    1.452885    1.656513   \n","1      -0.720137    -0.689131   -0.520925 -1.46385    1.452885    1.656513   \n","2      -0.720137    -0.689131   -0.520925 -1.46385    1.452885    1.656513   \n","3      -0.720137    -0.689131   -0.520925 -1.46385    1.452885    1.656513   \n","4      -0.720137    -0.689131   -0.520925 -1.46385    1.452885    1.656513   \n","\n","   이용금액_일시불_R12M  이용금액_일시불_B0M  이용금액_일시불_R6M  이용금액_일시불_R3M  이용금액_오프라인_B0M  \\\n","0      -0.355652     -0.345799     -0.473516     -0.559988        0.11058   \n","1      -0.355652     -0.345799     -0.473516     -0.559988        0.11058   \n","2      -0.355652     -0.345799     -0.473516     -0.559988        0.11058   \n","3      -0.355652     -0.345799     -0.473516     -0.559988        0.11058   \n","4      -0.355652     -0.345799     -0.473516     -0.559988        0.11058   \n","\n","   정상입금원금_B5M  정상입금원금_B0M  이용금액_오프라인_R3M  이용금액_오프라인_R6M  정상입금원금_B2M  \\\n","0    0.934315    0.557351      -0.466021      -0.377231    2.298502   \n","1    0.934315    0.557351      -0.466021      -0.377231    2.298502   \n","2    0.934315    0.557351      -0.466021      -0.377231    2.298502   \n","3    0.934315    0.557351      -0.466021      -0.377231    2.298502   \n","4    0.934315    0.557351      -0.466021      -0.377231    2.298502   \n","\n","   _3순위업종_이용금액  청구금액_R6M  청구금액_R3M   청구금액_B0  \n","0    -0.274429  1.139117  1.309407  0.912370  \n","1    -0.274429  1.767511  1.595726  1.362075  \n","2    -0.274429  2.030313  1.187505  1.359018  \n","3    -0.274429  1.212967  1.272408  1.167288  \n","4    -0.274429  1.314203  1.196119  1.133019  \n","\n","y.head():\n","0    D\n","1    D\n","2    D\n","3    D\n","4    D\n","Name: Segment, dtype: category\n","Categories (5, object): ['A', 'B', 'C', 'D', 'E']\n","X_scaled_df shape: (86400000, 20)\n","y shape: (86400000,)\n","\n","--- 타겟 변수 Label Encoding 완료 (['A' 'B' 'C' 'D' 'E']) ---\n","원본 y head: 0    D\n","1    D\n","2    D\n","3    D\n","4    D\n","Name: Segment, dtype: category\n","Categories (5, object): ['A', 'B', 'C', 'D', 'E']\n","인코딩된 y head: 0    3\n","1    3\n","2    3\n","3    3\n","4    3\n","dtype: int64\n","\n","--- 데이터 분할 결과 ---\n","훈련 데이터 (X_train) shape: (69120000, 20)\n","테스트 데이터 (X_test) shape: (17280000, 20)\n","훈련 타겟 (y_train) shape: (69120000,)\n","테스트 타겟 (y_test) shape: (17280000,)\n","\n","--- LGBMClassifier 모델 학습 시작 ---\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.999107 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 4852\n","[LightGBM] [Info] Number of data points in the train set: 69120000, number of used features: 20\n","[LightGBM] [Info] Start training from score -7.811609\n","[LightGBM] [Info] Start training from score -9.721214\n","[LightGBM] [Info] Start training from score -2.934402\n","[LightGBM] [Info] Start training from score -1.927459\n","[LightGBM] [Info] Start training from score -0.222075\n","모델 학습 완료!\n","\n","--- 테스트 데이터 예측 ---\n","예측 완료.\n","\n","--- 모델 성능 평가 ---\n","모델 정확도 (Accuracy): 0.8714\n","\n","--- 분류 리포트 ---\n","              precision    recall  f1-score   support\n","\n","           A       0.24      0.19      0.21      6998\n","           B       0.10      0.09      0.09      1037\n","           C       0.64      0.47      0.55    918648\n","           D       0.62      0.55      0.58   2514543\n","           E       0.92      0.96      0.94  13838774\n","\n","    accuracy                           0.87  17280000\n","   macro avg       0.50      0.45      0.47  17280000\n","weighted avg       0.86      0.87      0.87  17280000\n","\n","\n","--- 예측 값과 실제 값 비교 (테스트 세트 상위 10개) ---\n","  Actual Segment Predicted Segment\n","0              E                 E\n","1              E                 D\n","2              E                 E\n","3              E                 E\n","4              E                 E\n","5              E                 E\n","6              E                 E\n","7              E                 D\n","8              E                 E\n","9              E                 E\n","\n","--- 예측된 'Segment' 값들의 분포 ---\n","A        5482\n","B         939\n","C      678507\n","D     2249739\n","E    14345333\n","Name: count, dtype: int64\n","\n","스케일러와 LightGBM 모델이 각각 'scaler_r05.pkl', 'model_r05_lgbm.pkl'로 저장되었습니다.\n"]}]}]}